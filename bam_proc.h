
#ifndef BAM_PROC_H
#define BAM_PROC_H

#include "clopts.h"
#include "atac_data.h"
#include "rna_data.h"
#include "bam_dat.h"

typedef struct {
    bam1_t **a;
    uint32_t n;
    obj_pars *objs;
    bam_data_t *bam_data;
    int ret;
} bam_thrd_args;

/* These are the main pileup functions */

/**
 * @brief Process an ATAC-seq read from a BAM file.
 *
 * @param bam_r Pointer to the BAM record (bam1_t).
 * @param objs Pointer to the object containing parsing context (obj_pars).
 * @param bam_data Pointer to the structure where processed BAM data is stored (bam_data_t).
 * 
 * @return 0 on success or when specific conditions are met (e.g., unmapped read, secondary/supplementary alignment, low mapping quality, etc.).
 *         A negative error code is returned along with a corresponding error message on failure.
 * 
 * This function processes a single ATAC-seq read. It performs several validation checks on the input parameters,
 * reads the chromosome name, checks for unmapped/secondary/supplementary flags, validates mapping quality, 
 * extracts coordinates, checks exclusion regions, validates barcodes, checks the number of hits, initializes a read 
 * object, and captures overlapping variants, base calls, and qualities.
 * 
 * Specific conditions where 0 is returned:
 * - Record is unmapped.
 * - Record is a secondary alignment.
 * - Record is a supplementary alignment.
 * - Mapping quality is below the specified threshold.
 * - Read is located in exclusion regions.
 * - Missing or invalid barcode.
 * - Number of hits exceeds the threshold.
 *
 * Error conditions include:
 * - Null pointers for bam_r, objs, or bam_data.
 * - Chromosome name could not be determined.
 * - Failure to get coordinates.
 * - Failure to initialize an ATAC read object.
 * - Failure to overlap variants and bases in the BAM record.
 * - Failure to add the processed read to bam_data.
 */
int proc_atac1(bam1_t *bam_r, obj_pars *objs, bam_data_t *bam_data);

/**
 * @brief Process ATAC-seq BAM file and perform various downstream analyses.
 *
 * @param objs Pointer to an object containing parameters required for processing (e.g., BAM index, header, region).
 * @param bam_data Pointer to a data structure containing BAM data to be processed.
 * @return Returns 0 on success, or a negative value on error. Specific error messages can be generated by `err_msg`.
 *
 * This function processes an ATAC-seq BAM file based on the provided parameters 
 * and performs several steps including setting up BAM iterators, reading and processing 
 * BAM records, deduplication, variant calling, and peak calling.
 *
 * The function performs the following steps:
 * - Validates input parameters.
 * - Sets the BAM iterator to the specified region.
 * - Iterates over BAM records and processes ATAC-seq alignments.
 * - Calculates read statistics and logs progress if verbose mode is enabled.
 * - Processes each ATAC-seq alignment with the `proc_atac1` function.
 * - Deduplicates read pairs.
 * - Annotates BAM data at SNP sites.
 * - Optionally calls peaks if the `pks` parameter is set.
 *
 * Requirements:
 * - The `objs` parameter must not be NULL and must contain valid pointers to `atac_bam`, `gv`, and optionally `pks`.
 * - The `bam_data` parameter must not be NULL.
 *
 * @note The function will log progress and significant steps if verbosity is enabled in the `objs` parameter.
 */
int run_atac(obj_pars *objs, bam_data_t *bam_data);

/**
 * @brief Process a single RNA-seq BAM record and add it to the BAM data.
 *
 * @param bam_r Pointer to a `bam1_t` structure representing the BAM record.
 * @param objs Pointer to an object containing parameters such as UMI tag, barcode tag, exclusion regions, etc.
 * @param bam_data Pointer to a data structure where processed read data will be stored.
 * @return Returns 0 on success, or a negative value on error. Specific error messages can be generated by `err_msg`.
 *
 * This function processes a single RNA-seq BAM record and performs various checks 
 * and steps including collecting UMI and barcode data, checking alignment quality, 
 * filtering based on alignment flags, and adding the processed read data to the BAM data structure.
 *
 * The function performs the following steps:
 * - Validates input parameters.
 * - Checks if the read is unmapped, secondary, supplementary, or of low quality, and skips such reads.
 * - Extracts alignment coordinates, UMI, and barcode data from the BAM record.
 * - Filters reads based on the number of hits (NH tag) if specified.
 * - Allocates and populates a `rna_read1_t` object with alignment information and overlapping features/variants.
 * - Adds the processed read to the BAM data structure.
 * - Frees allocated resources and handles errors appropriately.
 *
 * Requirements:
 * - The `objs` parameter must not be NULL.
 * - The `bam_r` and `bam_data` parameters must not be NULL.
 *
 * @note The function will handle unmapped, secondary, and supplementary alignments as
 * well as low-quality reads by skipping them.
 */
int proc_rna1(bam1_t *bam_r, obj_pars *objs, bam_data_t *bam_data);

/**
 * @brief Process RNA-seq BAM file and perform various downstream analyses.
 *
 * This function processes an RNA-seq BAM file based on the provided parameters 
 * and performs several steps including setting up BAM iterators, reading and processing 
 * BAM records, deduplication, and variant calling.
 *
 * @param objs Pointer to an object containing parameters required for processing (e.g., BAM index, header, region).
 * @param bam_data Pointer to a data structure containing BAM data to be processed.
 * @return Returns 0 on success, or a negative value on error. Specific error messages can be generated by `err_msg`.
 *
 * The function performs the following steps:
 * - Validates input parameters.
 * - Sets the BAM iterator to the specified region.
 * - Iterates over BAM records and processes RNA-seq alignments.
 * - Calculates read statistics and logs progress if verbose mode is enabled.
 * - Processes each RNA-seq alignment with the `proc_rna1` function.
 * - Frees allocated resources and handles errors appropriately.
 * - Deduplicates RNA reads in the BAM data structure.
 * - Calls RNA pileup at SNP sites using the specified parameters.
 *
 * Requirements:
 * - The `objs` parameter must not be NULL and must contain valid pointers to `rna_bam`, `anno`, and `gv`.
 * - The `bam_data` parameter must not be NULL.
 *
 * @note The function will log significant steps and progress if verbosity is enabled in the `objs` parameter.
 */
int run_rna(obj_pars *objs, bam_data_t *bam_data);

/**
 * @brief Generate and write feature counts from BAM data.
 *
 * This function generates feature counts from BAM data and writes them to the specified file.
 * It supports adding genomic variants, gene maps, and peaks to the count data structure and
 * performs counting operations accordingly.
 *
 * @param bam_dat Pointer to the BAM data structure.
 * @param objs Pointer to an object containing parameters required for counting (e.g., genomic variants, annotations, peaks).
 * @param filename The name of the file to which the feature counts will be written.
 * @return Returns 0 on success, or a negative value on error. Specific error messages can be generated by `err_msg`.
 *
 * The function performs the following steps:
 * - Validates input parameters.
 * - Initializes the BAM counts data structure.
 * - Optionally adds genomic variants, gene maps, and peaks based on the provided parameters.
 * - Adds the barcode map to the BAM counts structure.
 * - Generates feature counts.
 * - Writes the generated feature counts to the specified file.
 * - Frees allocated resources and handles errors appropriately.
 *
 * Requirements:
 * - The `bam_dat` parameter must not be NULL and must contain the BAM data to be processed.
 * - The `objs` parameter must not be NULL and must contain valid pointers to optional genomic variants (`gv`), annotations (`anno`), and peaks (`pks`).
 * - The `filename` parameter must not be NULL and must be a valid file name.
 *
 * @note The function will log significant steps and progress if verbosity is enabled in the `objs` parameter.
 */
int bam_count(bam_data_t *bam_dat, obj_pars *objs, char *filename);

void *atac_thrd_fx(void *arg);
void *rna_thrd_fx(void *arg);
int rna_atac_thrd_call(bam1_t **a, uint32_t n, bam_data_t *bam_data, obj_pars *objs, 
        int rna_atac);
#endif // BAM_PROC_H
